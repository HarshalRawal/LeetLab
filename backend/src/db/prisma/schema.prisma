// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  enum userRole {
  ADMIN
  USER
}

enum difficultyLevel {
  EASY
  MEDIUM
  HARD
}
enum language {
  JAVASCRIPT
  JAVA
  PYTHON
}
model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique 
  password  String
  refreshToken String?
  isEmailVerified Boolean @default(false)
  isEmailVerifiedToken String?
  isEmailVerifiedTokenExpiresAt DateTime?
  forgotPasswordToken String?
  forgotPasswordTokenExpiresAt DateTime?
  role      userRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Problems Problem[]
  solvedProblem SolvedProblem[]
  submissions Submissions[]
  playList   Playlist[]
  solutions   Solution[]
  comments    Comment[]
  likesDislike  LikeDislike[]
  Votes         Vote[]
  views         SolutionView[]
}

model Problem {
  id String @unique @default(uuid())
  title String
  description String
  difficulty   difficultyLevel
  tags String[]
  userId String
  examples Json
  constraints String
  hints String?
  editorial String?
  expectedTimeComplexity String
  maxInputSize Int
  expectedTimeLimit Float
  expectedMemoryLimit Float
  testcases Json
  codeSnippets Json
  referenceSolutions Json
  createdAt  DateTime  @default(now())
  updatedAt DateTime   @updatedAt
  // relations
  user User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  solvedBy SolvedProblem[]
  submissions Submissions[]
  problemInPlaylist ProblemInPlaylist[]
  solutions   Solution[]
} 

model Solution{
  id   String  @id @default(uuid())
  title  String
  content Json 
  problemId String
  userId    String
  upvotes   Int   @default(0)
  downvotes Int   @default(0)
  viewCount  Int   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem   Problem @relation(fields: [problemId],references: [id],onDelete: Cascade)
  user      User    @relation(fields: [userId],references: [id],onDelete: Cascade)
  view      SolutionView[]
  comments   Comment[]
  votes      Vote[]
}
model SolutionView {
  id         String   @id @default(uuid())
  solutionId String
  userId     String

  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([solutionId, userId]) // Prevent duplicate views per user per solution
}


model Comment{
  id      String  @id @default(uuid())
  solutionId  String 
  content     String
  like        Int   @default(0)
  dislike     Int  @default(0)
  parentCommentId  String?
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt    DateTime   @updatedAt
  solution      Solution  @relation(fields: [solutionId],references: [id],onDelete: Cascade)
  user          User   @relation(fields: [userId],references: [id],onDelete: Cascade)
  likeDislike   LikeDislike[]
  parentComment  Comment? @relation("commentReplies",fields: [parentCommentId],references: [id],onDelete: Cascade)
  replies       Comment[] @relation("commentReplies")
}
model Vote {
  id         String   @id @default(uuid())
  solutionId String
  userId     String
  type       VoteType

  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([solutionId, userId]) 
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
model LikeDislike{
  id   String  @id  @default(uuid())
  type  LikeDislikeType
  userId String
  commentId String
  user      User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  comment  Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  @@unique([userId,commentId])
}
enum LikeDislikeType {
  LIKE
  DISLIKE
}
model SolvedProblem{
  id String @id @default(uuid())
  userId String
  problemId String
  solutionCode Json
  language     String
  user User @relation(fields: [userId],references: [id])
  problem Problem @relation(fields: [problemId],references: [id])
  @@unique([userId, problemId])
}

model Submissions {
    id String @unique @default(uuid())
    userId String
    problemId String
    sourcCode Json
    language String
    stdin String?
    stdout String?
    stderr String?
    compileOutput String?
    status String
    memory String
    time String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    testcases Testcases[]
    user User @relation(fields: [userId],references: [id],onDelete: Cascade)
    problem Problem @relation(fields: [problemId],references: [id],onDelete:Cascade)
}

model Testcases{
  id String @unique @default(uuid())
  submissionId String
  testCase    Int
  passed Boolean
  stdout String?
  expectedOutput String
  stderr String?
  compileOutput String?
  status String
  memory String
  time String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submission Submissions @relation(fields: [submissionId],references: [id],onDelete: Cascade)
  @@index([submissionId])
}

model Playlist {
  id  String @id @default(uuid())
  name String
  description String?
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId],references: [id])
  problems  ProblemInPlaylist[]
}

model ProblemInPlaylist {
  id  String @id @default(uuid())
  playlistId  String
  problemId   String

  problem    Problem @relation(fields: [problemId],references: [id],onDelete: Cascade)
  playList   Playlist @relation(fields: [playlistId],references: [id],onDelete: Cascade)

  @@unique([playlistId,problemId])
}


// {
//     "statusCode": 200,
//     "message": "Successfully found problem with id: 6dfb4fc8-6cbd-41ed-8d15-be59dd7abb3e",
//     "data": {
//         "problem": {
//             "id": "6dfb4fc8-6cbd-41ed-8d15-be59dd7abb3e",
//             "title": "Add Two Numbers",
//             "description": "onujmlksdcion",
//             "difficulty": "MEDIUM",
//             "tags": [
//                 "Maths"
//             ],
//             "userId": "d8d81178-736d-4282-b1f2-b33aef5bb8f6",
//             "examples": [
//                 {
//                     "input": "3 7",
//                     "output": "10",
//                     "explanation": "adding 3 and 7 gives 10"
//                 }
//             ],
//             "constraints": "-10^9 < a , b < 10^9",
//             "hints": null,
//             "editorial": null,
//             "expectedTimeComplexity": "0(1)",
//             "maxInputSize": 1000000000,
//             "expectedTimeLimit": 10,
//             "expectedMemoryLimit": 256000,
//             "testcases": [
//                 {
//                     "input": "100 200",
//                     "output": "300"
//                 },
//                 {
//                     "input": "100 400",
//                     "output": "300"
//                 }
//             ],
//             "codeSnippets": {
//                 "JAVA": "import java.util.Scanner;\n\npublic class Main {\n\n    public static int addTwoNumbers(int a, int b) {\n        // Write your code here\n        // Return the sum of a and b\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(addTwoNumbers(a, b));\n    }\n}\n",
//                 "PYTHON": "def add_two_numbers(a, b):\n    # Write your code here\n    # Return the sum of a and b\n    return a + b\n\nimport sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(add_two_numbers(a, b))\n",
//                 "JAVASCRIPT": "const fs = require('fs');\n\nfunction addTwoNumbers(a, b) {\n    // Write your code here\n    // Return the sum of a and b\n    return a + b;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\nconsole.log(addTwoNumbers(a, b));\n"
//             },
//             "referenceSolutions": {
//                 "JAVA": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a + b);\n    }\n}\n",
//                 "PYTHON": "import sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(a + b)\n",
//                 "JAVASCRIPT": "const fs = require('fs');\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\nconsole.log(a + b);\n"
//             },
//             "createdAt": "2025-07-03T15:24:45.142Z",
//             "updatedAt": "2025-07-03T15:24:45.142Z",
//             "_count": {
//                 "submissions": 0
//             }
//         }
//     },
//     "success": true
// } from this data i want to display title,description,tags,constraint,examples,and testcases that will be displayed will be the examples and the code-editor will display the code snippet if the problem is not solved by the user and if it is solved it will display the 